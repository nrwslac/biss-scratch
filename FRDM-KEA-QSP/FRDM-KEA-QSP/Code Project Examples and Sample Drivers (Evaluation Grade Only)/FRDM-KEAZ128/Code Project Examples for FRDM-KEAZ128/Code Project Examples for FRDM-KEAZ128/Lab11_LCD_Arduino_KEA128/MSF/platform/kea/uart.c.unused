/**
 * @File        uart.c
 * @brief     Provide common uart routines for Kinetis MCU; for UART0 only!
 *
 * @Note  
 * Initialises pins Tx = PTA1, Rx = PTA2 and clock source for UART to PLLFLLCLK
 * 
 * The UART0 clock source is configured in SIM_SOPT2 register; by default
 * the CPU clock is 20.9 MHz and if PLL-FLL is selected as UART0 clock source, 
 * the UART clock will be also 20.9 MHz.
 * If PLL is used as CPU clock source, then the UART0 clock is PLL_clock/ 2 !
 * The UART0 clock source is set to PLL/FLL by this driver (this is one, the same option)
 * it depends on the user code what is set as CPU clock.
 *
 * Zaklad kodu je z FRDM-KL25 sample code package     
 *              
 */


/* MSF includes */
#include "msf_config.h"

/* Include the core definitions - CMSIS <device>.h file etc.*/
#include "coredef.h"
#include "msf.h"
#include "uart.h"

// jd: Added this include for the SCB_VTOR and SIM_COPC macros.
#include "MemMapPtr_KL25Z4.h"

#define LF 0x0A						// Line Feed ASCII code
#define CR 0x0D						// Carriage Return ASCII code

 
/********************************************************************/
/** Initialize UART0 with given baudrate
 * 
 * @param speed baudrate constant, e.g. BD_115200 
 *
 * @note Initialize the uart for 8N1 operation, interrupts disabled, and
 * no hardware flow-control
 *
 */
 uint8_t uart_init(UART_speed_t speed)
{
    uint32_t osr_val;
    uint32_t sbr_val;
    uint32_t reg_temp = 0;
        
    /* Enable clock for PORTA needed for Tx, Rx pins */
    SIM->SCGC5 |= SIM_SCGC5_PORTA_MASK;
    		
    /* Enable the UART_TXD function on PTA1 */
    //PORTA_PCR1 = PORT_PCR_MUX(0x2);
    GPIO_PORT_OBJECT(GPIO_A1)->PCR[GPIO_PIN_NUM(GPIO_A1)] = PORT_PCR_MUX(2);
    /* Enable the UART_TXD function on PTA2 */
    //PORTA_PCR2 = PORT_PCR_MUX(0x2);
    GPIO_PORT_OBJECT(GPIO_A2)->PCR[GPIO_PIN_NUM(GPIO_A2)] = PORT_PCR_MUX(2);
    
    /* set clock for UART0 */
    //SIM->SOPT2 |= SIM_SOPT2_UART0SRC(1); // select the PLLFLLCLK as UART0 clock source
    //SIM->SOPT2 |= SIM_SOPT2_UART0SRC(2); // select the OSCERCLK as UART0 clock source
    SIM->SOPT2 |= SIM_SOPT2_UART0SRC(MSF_UART0_CLKSEL);
    
    osr_val = UART_GET_OSR(speed);
    sbr_val = UART_GET_BR(speed);
    
    SIM->SCGC4 |= SIM_SCGC4_UART0_MASK;
    
    // Disable UART0 before changing registers
    UART0->C2 &= ~(UART0_C2_TE_MASK | UART0_C2_RE_MASK);
      
    
    // If the OSR is between 4x and 8x then both
    // edge sampling MUST be turned on.  
    if ((osr_val >3) && (osr_val < 9))
    	UART0->C5|= UART0_C5_BOTHEDGE_MASK;
        
    // Setup OSR value 
    reg_temp = UART0->C4;
    reg_temp &= ~UART0_C4_OSR_MASK;
    reg_temp |= UART0_C4_OSR(osr_val-1);
    
    // Write reg_temp to C4 register
    UART0->C4 = reg_temp;
        
    //reg_temp = (reg_temp & UART0_C4_OSR_MASK) + 1;
        
    /* Save current value of uartx_BDH except for the SBR field */
    reg_temp = UART0->BDH & ~(UART0_BDH_SBR(0x1F));
   
    UART0->BDH = reg_temp |  UART0_BDH_SBR(((sbr_val & 0x1F00) >> 8));
    UART0->BDL = (uint8_t)(sbr_val & UART0_BDL_SBR_MASK);
        
    /* Enable receiver and transmitter */
    UART0->C2 |= (UART0_C2_TE_MASK | UART0_C2_RE_MASK );
    
    return 0;	/* OK*/
       
}
 
 /** Write single byte to SCI
  * @param byte of data to write
  **/
 void uart_write(uint8_t data)
 {
	 /* Wait until space is available in the FIFO */
	 while(!(UART0->S1 & UART0_S1_TDRE_MASK))
		 ;
	    
	 /* Send the character */
	 UART0->D = data;
 }
 
 /** Read byte form SCI; wait for data to arrive!
  * @return byte received from SCI.
  **/
 uint8_t uart_read(void)
 {
	 /* Wait until character has been received */
	 while (!(UART0->S1 & UART0_S1_RDRF_MASK))
		 ;
	     
	 /* Return the 8-bit data from the receiver */
	 return UART0->D;
 }
 
 /** Check if data are available for reading
  * @return true if there are data 
 **/
 bool uart_data_available(void)
 {
	 return ((UART0->S1 & UART0_S1_RDRF_MASK) != 0);
 }
 
  
